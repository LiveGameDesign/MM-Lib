/******************************************************************************
 * Copyright (c) 2013-2014, Amsterdam University of Applied Sciences (HvA) and
 *                          Centrum Wiskunde & Informatica (CWI)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors:
 *   * Riemer van Rozen - rozen@cwi.nl - HvA / CWI
 ******************************************************************************/

%option interactive
%{
/* * * * * * * * * * * *
 * * * DEFINITIONS * * *
 * * * * * * * * * * * */
%}

%{
  #include "YYLTYPE.h"
  #include "mm.h"
  #define LEX_ID_SIZE 256
  #ifdef _MSC_VER
    #include "mm.tab.hpp"
    #define YY_NO_UNISTD_H 
    #include "io.h"
  #else
    #include "y.tab.h"
  #endif

  //FIXME: globals should be instance data
  //TODO: add a Parser abstraction (a.k.a. re-entrant parsing)
  int yycolumn = 1;          //TODO: attribute of parser
  char yyid[256] = { 0 };    //TODO: attribute of parser
  char yystr[256] = { 0 };   //TODO: attribute of parser
  int yyidpos = 0;           //TODO: attribute of parser
  bool inID = false;         //TODO: attribute of parser

  #define YY_USER_ACTION \
  if(inID == false) \
  { \
    yylloc.first_line = (int) yylineno; \
    yylloc.first_column = (int) yycolumn; \
    yylloc.last_line = (int) yylineno; \
  } \
  yylloc.last_column = (int) yycolumn + (int) yyleng - 1; \
  yycolumn += yyleng;

  //%option yylineno
%}

%option noyywrap

%{
  /* * * * * * * * * *
   * * * STATES  * * *
   * * * * * * * * * */
%}

%x ERROR
%x IDPART
%x IDPART2
%x IN_S_COMMENT
%x IN_M_COMMENT
%%

%{
/* * * * * * * * * 
 * * * RULES * * *
 * * * * * * * * */
%}

[ \t\r\f]           { inID = false; /*ignore*/                }
\n                  { inID = false; yylineno++; yycolumn = 1; }

<INITIAL>"//"       { inID = false; BEGIN(IN_S_COMMENT);      }
<IN_S_COMMENT>\n    { inID = false; yylineno++; yycolumn = 1; BEGIN(INITIAL); }
<IN_S_COMMENT>[^/]  { inID = false;                           }
<IN_S_COMMENT>"/"   { inID = false;                           }


<INITIAL>"/*"       { inID = false; BEGIN(IN_M_COMMENT);      }
<IN_M_COMMENT>"*/"  { inID = false; BEGIN(INITIAL);           }
<IN_M_COMMENT>\n    { inID = false; yylineno++; yycolumn = 1; }
<IN_M_COMMENT>[^*]  { inID = false;                           }
<IN_M_COMMENT>"*"   { inID = false;                           }

"&&"                { inID = false; return AND;        }
"||"                { inID = false; return OR;         }
".."                { inID = false; return RANGE;      }
".>"                { inID = false; return DOT_GT;     }
"->"                { inID = false; return SUB_GT;     }
"=="                { inID = false; return EQ;         }
"!="                { inID = false; return NE;         }
"<="                { inID = false; return LE;         }
">="                { inID = false; return GE;         }
"<"                 { inID = false; return LT;         }
">"                 { inID = false; return GT;         }
"."                 { inID = false; return DOT;        }
"-"	                { inID = false; return SUB;        }
"~"                 { inID = false; return UNM;        }
"+"	                { inID = false; return ADD;        }
"*"	                { inID = false; return MUL;        }
"/"	                { inID = false; return DIV;        }
"="                 { inID = false; return ALIAS;      }
"("	                { inID = false; return LPAREN;     }
")"	                { inID = false; return RPAREN;     }
"!"                 { inID = false; return NOT;        }
"|"                 { inID = false; return PER;        }
"{"                 { inID = false; return LCURLY;     }
"}"                 { inID = false; return RCURLY;     }
","                 { inID = false; return COMMA;      }
":"                 { inID = false; return COLON;      }
"%"                 { inID = false; return PERCENT;    }
"source"/[^a-z]     { inID = false; return SOURCE;     }
"drain"/[^a-z]      { inID = false; return DRAIN;      }
"pool"/[^a-z]       { inID = false; return POOL;       }
"gate"/[^a-z]       { inID = false; return GATE;       }
"converter"/[^a-z]  { inID = false; return CONVERTER;  }
"push"/[^a-z]       { inID = false; return PUSH;       }
"pull"/[^a-z]       { inID = false; return PULL;       }
"passive"/[^a-z]    { inID = false; return PASSIVE;    }
"all"/[^a-z]        { inID = false; return ALL;        }
"any"/[^a-z]        { inID = false; return ANY;        }
"auto"/[^a-z]       { inID = false; return AUTO;       }
"user"/[^a-z]       { inID = false; return USER;       }
"start"/[^a-z]      { inID = false; return START;      }
"max"/[^a-z]        { inID = false; return MAX;        }
"at"/[^a-z]         { inID = false; return AT;         }
"in"/[^a-z]         { inID = false; return IN;         }
"out"/[^a-z]        { inID = false; return OUT;        }
"inout"/[^a-z]      { inID = false; return INOUT;      }
"ref"/[^a-z]        { inID = false; return REF;        }
"dice"/[^a-z]       { inID = false; return DICE;       }
"active"/[^a-z]     { inID = false; return ACTIVE;     }
"false"/[^a-z]      { inID = false; return FALSE;      }
"true"/[^a-z]       { inID = false; return TRUE;       }
"assert"/[^a-z]     { inID = false; return ASSERT;     }
"delete"/[^a-z]     { inID = false; return DELETE;     }
"activate"/[^a-z]   { inID = false; return ACTIVATE;   }
"private"/[^a-z]    { inID = false; return PRIVATE;    }
"of"/[^a-z]         { inID = false; return OF;         }
"add"/[^a-z]        { inID = false; return ADDITION;   }
"from"/[^a-z]       { inID = false; return FROM;       }
"to"/[^a-z]         { inID = false; return TO;         }
"signal"/[^a-z]     { inID = false; return SIGNAL;     }
"modify"/[^a-z]     { inID = false; return MODIFY;     }
"step"/[^a-z]       { inID = false; return STEP;       }

["][^"]*["] {
  inID = false;
  yylval.str = strdup(yytext);         //copy string in yyval.str
   printf("line %d col %d endline %d endcol %d : [%s]\n",
            yylloc.first_line,
            yylloc.first_column,
            yylloc.last_line, yylloc.last_column,
            yylval.str);
  return STRING;
}

[0-9]+[.][0-9][0-9]? {
  inID = false;
  yylval.val = atol(yytext) * 100;     //store integer
  size_t size = strcspn(yytext, ".");
  if(size < yyleng)
  {
    yylval.val += atol(yytext+size+1); //store fraction
  }
  return FPVAL;
}

[0-9]+ {
  inID = false;
  yylval.val = atol(yytext) * 100;     //store integer
  return FPVAL;
}

[a-zA-Z][a-zA-Z0-9_]*/[^.] {
  inID = false;

  //NOTE: this buffer is freed in the parser
  yylval.str = strdup(yytext);
  //printf("ID [%s]\n", yytext);
  //yylloc.first_line = (int) yylineno;
  //yylloc.first_column = (int) yycolumn;
  //yylloc.last_line = (int) yylineno;
  
  //printf("first part [%s]\n", yytext);
 
  return ID;
}

[a-zA-Z][a-zA-Z0-9_]*"."/[^>] {
  inID = true;

  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);

  //printf("IDPART [%s]\n", yytext);

  BEGIN(IDPART);
}

[a-zA-Z][a-zA-Z0-9_]*":"[ \t\f\r]* {
  inID = true;

  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);

  //printf("IDPART [%s]\n", yytext);

  BEGIN(IDPART2);
}

<IDPART>[a-zA-Z][a-zA-Z0-9_]*"."/[^>] {
  inID = true;
  //printf("%s\n", yytext);
  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);

  //printf("IDPART [%s]\n", yytext);
  
  BEGIN(IDPART);
}

<IDPART>[a-zA-Z][a-zA-Z0-9_]*":"[ \t\f\r]* {
  inID = true;
  //printf("%s\n", yytext);
  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);

  //printf("IDPART [%s]\n", yytext);
  
  BEGIN(IDPART2);
}

<IDPART2>[a-zA-Z][a-zA-Z0-9_]*"."/[^>] {
  inID = true;
  //printf("%s\n", yytext);
  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);

  //printf("IDPART [%s]\n", yytext);
  
  BEGIN(IDPART2);
}

<IDPART,IDPART2>[a-zA-Z0-9_]* {
  ///[^.]
  inID = false;
  sprintf(yyid + yyidpos, "%s", yytext); //store remainder of the ID in global yyid
  yyidpos += strlen(yytext);
  
  //NOTE: this buffer is freed in the parser
  yylval.str = (MM::CHAR*) malloc(yyidpos + 2);    //allocate memory
  memset(yylval.str, 0, yyidpos + 2);              //clear memory
  snprintf(yylval.str, yyidpos + 2, "%s",yyid);    //store identifier
  
  //printf("part [%s]\n", yylval.str);
  
  yyidpos = 0;
  memset(yyid, 0, LEX_ID_SIZE);
  
  BEGIN(INITIAL);
  return ID;
}

%%

